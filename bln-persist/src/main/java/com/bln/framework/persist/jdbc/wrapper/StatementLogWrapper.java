/**
 * @author Gengw
 * Created at 2008-05-05
 */
package com.bln.framework.persist.jdbc.wrapper;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import com.bln.framework.persist.jdbc.wrapper.log.LogSql;

/**
 * StatementÕ‚∏≤¿‡
 *
 */
public class StatementLogWrapper implements Statement{

	private Statement _statement = null;

	private LogSql log = new LogSql();
	
	public StatementLogWrapper(Statement statement){
		_statement = statement;
	}

	public void addBatch(String sql) throws SQLException {
		log.initSQL(sql);
		_statement.addBatch(sql);
	}

	public void cancel() throws SQLException {
		_statement.cancel();
	}

	public void clearBatch() throws SQLException {
		_statement.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		_statement.clearWarnings();
	}

	public void close() throws SQLException {
		_statement.close();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		log.logSQL(sql);
		return _statement.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		log.logSQL(sql);
		return _statement.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		log.logSQL(sql);
		return _statement.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		log.logSQL(sql);
		return _statement.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		log.logSQL();
		return _statement.executeBatch();
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		log.logSQL(sql);
		return new ResultSetLogWrapper(_statement.executeQuery(sql));
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		log.logSQL(sql);
		return _statement.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		log.logSQL(sql);
		return _statement.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		log.logSQL(sql);
		return _statement.executeUpdate(sql, columnNames);
	}

	public int executeUpdate(String sql) throws SQLException {
		log.logSQL(sql);
		return _statement.executeUpdate(sql);
	}

	public Connection getConnection() throws SQLException {
		return _statement.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return _statement.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return _statement.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return new ResultSetLogWrapper(_statement.getGeneratedKeys());
	}

	public int getMaxFieldSize() throws SQLException {
		return _statement.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return _statement.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return _statement.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return _statement.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		return _statement.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return new ResultSetLogWrapper(_statement.getResultSet());
	}

	public int getResultSetConcurrency() throws SQLException {
		return _statement.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return _statement.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return _statement.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return _statement.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return _statement.getWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		_statement.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		_statement.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		_statement.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		_statement.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		_statement.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		_statement.setMaxRows(max);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		_statement.setQueryTimeout(seconds);
	}

}
