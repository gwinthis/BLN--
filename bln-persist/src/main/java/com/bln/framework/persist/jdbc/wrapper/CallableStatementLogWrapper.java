/**
 * @author Gengw
 * Created at 2008-05-05
 * 
 */

package com.bln.framework.persist.jdbc.wrapper;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;

import com.bln.framework.persist.jdbc.wrapper.log.LogSql;


/**
 *	CallableStatementÕ‚∏≤¿‡
 */
@SuppressWarnings({ "unchecked", "deprecation" })
public class CallableStatementLogWrapper implements CallableStatement{

	private CallableStatement _callableStatement = null;

	private LogSql log = new LogSql();

	private String preparedSql = null;
	
	public void setLogSql(String sql){
		this.preparedSql = sql;
		log.initSQL(preparedSql);
	}
	
	public CallableStatementLogWrapper(CallableStatement callableStatement){
		this._callableStatement = callableStatement;
	}
	
	public void addBatch() throws SQLException {
		log.addSQL(log.getSql());
		log.initSQL(preparedSql);
		_callableStatement.addBatch();
	}

	public void addBatch(String arg0) throws SQLException {
		log.initSQL(arg0);
		_callableStatement.addBatch(arg0);
	}
	
	public void cancel() throws SQLException {
		_callableStatement.cancel();
	}

	public void clearBatch() throws SQLException {
		_callableStatement.clearBatch();
	}

	public void clearParameters() throws SQLException {
		_callableStatement.clearParameters();
	}

	public void clearWarnings() throws SQLException {
		_callableStatement.clearWarnings();
	}

	public void close() throws SQLException {
		_callableStatement.close();
	}

	public boolean execute() throws SQLException {
		log.logSQL();
		return _callableStatement.execute();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		log.logSQL();
		return _callableStatement.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		log.logSQL();
		return _callableStatement.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		log.logSQL();
		return _callableStatement.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		log.logSQL();
		return _callableStatement.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		log.logSQLS();
		return _callableStatement.executeBatch();
	}

	public ResultSet executeQuery() throws SQLException {
		log.logSQL();
		return _callableStatement.executeQuery();
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		log.logSQL();
		return _callableStatement.executeQuery(sql);
	}

	public int executeUpdate() throws SQLException {
		log.logSQL();
		return _callableStatement.executeUpdate();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		log.logSQL();
		return _callableStatement.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		log.logSQL();
		return _callableStatement.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		log.logSQL();
		return _callableStatement.executeUpdate(sql, columnNames);
	}

	public int executeUpdate(String sql) throws SQLException {
		log.logSQL();
		return _callableStatement.executeUpdate(sql);
	}

	public Array getArray(int i) throws SQLException {
		return _callableStatement.getArray(i);
	}

	public Array getArray(String parameterName) throws SQLException {
		return _callableStatement.getArray(parameterName);
	}
	
	public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {
		return _callableStatement.getBigDecimal(parameterIndex, scale);
	}

	public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {
		return _callableStatement.getBigDecimal(parameterIndex);
	}

	public BigDecimal getBigDecimal(String parameterName) throws SQLException {
		return _callableStatement.getBigDecimal(parameterName);
	}

	public Blob getBlob(int i) throws SQLException {
		return _callableStatement.getBlob(i);
	}

	public Blob getBlob(String parameterName) throws SQLException {
		return _callableStatement.getBlob(parameterName);
	}

	public boolean getBoolean(int parameterIndex) throws SQLException {
		return _callableStatement.getBoolean(parameterIndex);
	}

	public boolean getBoolean(String parameterName) throws SQLException {
		return _callableStatement.getBoolean(parameterName);
	}

	public byte getByte(int parameterIndex) throws SQLException {
		return _callableStatement.getByte(parameterIndex);
	}

	public byte getByte(String parameterName) throws SQLException {
		return _callableStatement.getByte(parameterName);
	}

	public byte[] getBytes(int parameterIndex) throws SQLException {
		return _callableStatement.getBytes(parameterIndex);
	}

	public byte[] getBytes(String parameterName) throws SQLException {
		return _callableStatement.getBytes(parameterName);
	}

	public Clob getClob(int i) throws SQLException {
		return _callableStatement.getClob(i);
	}

	public Clob getClob(String parameterName) throws SQLException {
		return _callableStatement.getClob(parameterName);
	}

	public Connection getConnection() throws SQLException {
		return _callableStatement.getConnection();
	}

	public Date getDate(int parameterIndex, Calendar cal) throws SQLException {
		return _callableStatement.getDate(parameterIndex, cal);
	}

	public Date getDate(int parameterIndex) throws SQLException {
		return _callableStatement.getDate(parameterIndex);
	}

	public Date getDate(String parameterName, Calendar cal) throws SQLException {
		return _callableStatement.getDate(parameterName, cal);
	}

	public Date getDate(String parameterName) throws SQLException {
		return _callableStatement.getDate(parameterName);
	}

	public double getDouble(int parameterIndex) throws SQLException {
		return _callableStatement.getDouble(parameterIndex);
	}

	public double getDouble(String parameterName) throws SQLException {
		return _callableStatement.getDouble(parameterName);
	}

	public int getFetchDirection() throws SQLException {
		return _callableStatement.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return _callableStatement.getFetchSize();
	}

	public float getFloat(int parameterIndex) throws SQLException {
		return _callableStatement.getFloat(parameterIndex);
	}

	public float getFloat(String parameterName) throws SQLException {
		return _callableStatement.getFloat(parameterName);
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return _callableStatement.getGeneratedKeys();
	}

	public int getInt(int parameterIndex) throws SQLException {
		return _callableStatement.getInt(parameterIndex);
	}

	public int getInt(String parameterName) throws SQLException {
		return _callableStatement.getInt(parameterName);
	}

	public long getLong(int parameterIndex) throws SQLException {
		return _callableStatement.getLong(parameterIndex);
	}

	public long getLong(String parameterName) throws SQLException {
		return _callableStatement.getLong(parameterName);
	}

	public int getMaxFieldSize() throws SQLException {
		return _callableStatement.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return _callableStatement.getMaxRows();
	}

	public ResultSetMetaData getMetaData() throws SQLException {
		return _callableStatement.getMetaData();
	}

	public boolean getMoreResults() throws SQLException {
		return _callableStatement.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return _callableStatement.getMoreResults(current);
	}

	@SuppressWarnings("rawtypes")
	public Object getObject(int i, Map map) throws SQLException {
		return _callableStatement.getObject(i, map);
	}

	public Object getObject(int parameterIndex) throws SQLException {
		return _callableStatement.getObject(parameterIndex);
	}

	@SuppressWarnings("rawtypes")
	public Object getObject(String parameterName, Map map) throws SQLException {
		return _callableStatement.getObject(parameterName, map);
	}

	public Object getObject(String parameterName) throws SQLException {
		return _callableStatement.getObject(parameterName);
	}

	public ParameterMetaData getParameterMetaData() throws SQLException {
		return _callableStatement.getParameterMetaData();
	}

	public int getQueryTimeout() throws SQLException {
		return _callableStatement.getQueryTimeout();
	}

	public Ref getRef(int i) throws SQLException {
		return _callableStatement.getRef(i);
	}

	public Ref getRef(String parameterName) throws SQLException {
		return _callableStatement.getRef(parameterName);
	}

	public ResultSet getResultSet() throws SQLException {
		return _callableStatement.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return _callableStatement.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return _callableStatement.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return _callableStatement.getResultSetType();
	}

	public short getShort(int parameterIndex) throws SQLException {
		return _callableStatement.getShort(parameterIndex);
	}

	public short getShort(String parameterName) throws SQLException {
		return _callableStatement.getShort(parameterName);
	}

	public String getString(int parameterIndex) throws SQLException {
		return _callableStatement.getString(parameterIndex);
	}

	public String getString(String parameterName) throws SQLException {
		return _callableStatement.getString(parameterName);
	}

	public Time getTime(int parameterIndex, Calendar cal) throws SQLException {
		return _callableStatement.getTime(parameterIndex, cal);
	}

	public Time getTime(int parameterIndex) throws SQLException {
		return _callableStatement.getTime(parameterIndex);
	}

	public Time getTime(String parameterName, Calendar cal) throws SQLException {
		return _callableStatement.getTime(parameterName, cal);
	}

	public Time getTime(String parameterName) throws SQLException {
		return _callableStatement.getTime(parameterName);
	}

	public Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {
		return _callableStatement.getTimestamp(parameterIndex, cal);
	}

	public Timestamp getTimestamp(int parameterIndex) throws SQLException {
		return _callableStatement.getTimestamp(parameterIndex);
	}

	public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
		return _callableStatement.getTimestamp(parameterName, cal);
	}

	public Timestamp getTimestamp(String parameterName) throws SQLException {
		return _callableStatement.getTimestamp(parameterName);
	}

	public int getUpdateCount() throws SQLException {
		return _callableStatement.getUpdateCount();
	}

	public URL getURL(int parameterIndex) throws SQLException {
		return _callableStatement.getURL(parameterIndex);
	}

	public URL getURL(String parameterName) throws SQLException {
		return _callableStatement.getURL(parameterName);
	}

	public SQLWarning getWarnings() throws SQLException {
		return _callableStatement.getWarnings();
	}

	public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {
		_callableStatement.registerOutParameter(parameterIndex, sqlType, scale);
	}

	public void registerOutParameter(int paramIndex, int sqlType, String typeName) throws SQLException {
		_callableStatement.registerOutParameter(paramIndex, sqlType, typeName);
	}

	public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {
		_callableStatement.registerOutParameter(parameterIndex, sqlType);
	}

	public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {
		_callableStatement.registerOutParameter(parameterName, sqlType, scale);
	}

	public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {
		_callableStatement.registerOutParameter(parameterName, sqlType, typeName);
	}

	public void registerOutParameter(String parameterName, int sqlType) throws SQLException {
		_callableStatement.registerOutParameter(parameterName, sqlType);
	}

	public void setArray(int i, Array x) throws SQLException {
		_callableStatement.setArray(i, x);
		log.setParam(x);
	}

	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		_callableStatement.setAsciiStream(parameterIndex, x, length);
		log.setParam(x);
	}

	public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
		_callableStatement.setAsciiStream(parameterName, x, length);
		log.setParam(x);
	}

	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		_callableStatement.setBigDecimal(parameterIndex, x);
		log.setParam(x);
	}

	public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
		_callableStatement.setBigDecimal(parameterName, x);
		log.setParam(x);
	}

	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		_callableStatement.setBinaryStream(parameterIndex, x, length);
		log.setParam(x);
	}

	public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
		_callableStatement.setBinaryStream(parameterName, x, length);
		log.setParam(x);
	}

	public void setBlob(int i, Blob x) throws SQLException {
		_callableStatement.setBlob(i, x);
		log.setParam(x);
	}

	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		_callableStatement.setBoolean(parameterIndex, x);
		log.setParam(x);
	}

	public void setBoolean(String parameterName, boolean x) throws SQLException {
		_callableStatement.setBoolean(parameterName, x);
		log.setParam(x);
	}

	public void setByte(int parameterIndex, byte x) throws SQLException {
		_callableStatement.setByte(parameterIndex, x);
		log.setParam(x);
	}

	public void setByte(String parameterName, byte x) throws SQLException {
		_callableStatement.setByte(parameterName, x);
		log.setParam(x);
	}

	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		_callableStatement.setBytes(parameterIndex, x);
		log.setParam(x);
	}

	public void setBytes(String parameterName, byte[] x) throws SQLException {
		_callableStatement.setBytes(parameterName, x);
		log.setParam(x);
	}

	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		_callableStatement.setCharacterStream(parameterIndex, reader, length);
		log.setParam(reader);
	}

	public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {
		_callableStatement.setCharacterStream(parameterName, reader, length);
		log.setParam(reader);
	}

	public void setClob(int i, Clob x) throws SQLException {
		_callableStatement.setClob(i, x);
		log.setParam(x);
	}

	public void setCursorName(String name) throws SQLException {
		_callableStatement.setCursorName(name);
	}

	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		_callableStatement.setDate(parameterIndex, x, cal);
		log.setParam(x);
	}

	public void setDate(int parameterIndex, Date x) throws SQLException {
		_callableStatement.setDate(parameterIndex, x);
		log.setParam(x);
	}

	public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {
		_callableStatement.setDate(parameterName, x, cal);
		log.setParam(x);
	}

	public void setDate(String parameterName, Date x) throws SQLException {
		_callableStatement.setDate(parameterName, x);
		log.setParam(x);
	}

	public void setDouble(int parameterIndex, double x) throws SQLException {
		_callableStatement.setDouble(parameterIndex, x);
		log.setParam(x);
	}

	public void setDouble(String parameterName, double x) throws SQLException {
		_callableStatement.setDouble(parameterName, x);
		log.setParam(x);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		_callableStatement.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		_callableStatement.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		_callableStatement.setFetchSize(rows);
	}

	public void setFloat(int parameterIndex, float x) throws SQLException {
		_callableStatement.setFloat(parameterIndex, x);
		log.setParam(x);
	}

	public void setFloat(String parameterName, float x) throws SQLException {
		_callableStatement.setFloat(parameterName, x);
		log.setParam(x);
	}

	public void setInt(int parameterIndex, int x) throws SQLException {
		_callableStatement.setInt(parameterIndex, x);
		log.setParam(x);
	}

	public void setInt(String parameterName, int x) throws SQLException {
		_callableStatement.setInt(parameterName, x);
		log.setParam(x);
	}

	public void setLong(int parameterIndex, long x) throws SQLException {
		_callableStatement.setLong(parameterIndex, x);
		log.setParam(x);
	}

	public void setLong(String parameterName, long x) throws SQLException {
		_callableStatement.setLong(parameterName, x);
		log.setParam(x);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		_callableStatement.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		_callableStatement.setMaxRows(max);
	}

	public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
		_callableStatement.setNull(paramIndex, sqlType, typeName);
		log.setParam((Integer)null);
	}

	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		_callableStatement.setNull(parameterIndex, sqlType);
		log.setParam((Integer)null);
	}

	public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
		_callableStatement.setNull(parameterName, sqlType, typeName);
		log.setParam((Integer)null);
	}

	public void setNull(String parameterName, int sqlType) throws SQLException {
		_callableStatement.setNull(parameterName, sqlType);
		log.setParam((Integer)null);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
		_callableStatement.setObject(parameterIndex, x, targetSqlType, scale);
		log.setParam(x);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		_callableStatement.setObject(parameterIndex, x, targetSqlType);
		log.setParam(x);
	}

	public void setObject(int parameterIndex, Object x) throws SQLException {
		_callableStatement.setObject(parameterIndex, x);
		log.setParam(x);
	}

	public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {
		_callableStatement.setObject(parameterName, x, targetSqlType, scale);
		log.setParam(x);
	}

	public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {
		_callableStatement.setObject(parameterName, x, targetSqlType);
		log.setParam(x);
	}

	public void setObject(String parameterName, Object x) throws SQLException {
		_callableStatement.setObject(parameterName, x);
		log.setParam(x);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		_callableStatement.setQueryTimeout(seconds);
	}

	public void setRef(int i, Ref x) throws SQLException {
		_callableStatement.setRef(i, x);
		log.setParam(x);
	}

	public void setShort(int parameterIndex, short x) throws SQLException {
		_callableStatement.setShort(parameterIndex, x);
		log.setParam(x);
	}

	public void setShort(String parameterName, short x) throws SQLException {
		_callableStatement.setShort(parameterName, x);
		log.setParam(x);
	}

	public void setString(int parameterIndex, String x) throws SQLException {
		_callableStatement.setString(parameterIndex, x);
		log.setParam(x);
	}

	public void setString(String parameterName, String x) throws SQLException {
		_callableStatement.setString(parameterName, x);
		log.setParam(x);
	}

	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		_callableStatement.setTime(parameterIndex, x, cal);
		log.setParam(x);
	}

	public void setTime(int parameterIndex, Time x) throws SQLException {
		_callableStatement.setTime(parameterIndex, x);
		log.setParam(x);
	}

	public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
		_callableStatement.setTime(parameterName, x, cal);
		log.setParam(x);
	}

	public void setTime(String parameterName, Time x) throws SQLException {
		_callableStatement.setTime(parameterName, x);
		log.setParam(x);
	}

	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		_callableStatement.setTimestamp(parameterIndex, x, cal);
		log.setParam(x);
	}

	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		_callableStatement.setTimestamp(parameterIndex, x);
		log.setParam(x);
	}

	public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
		_callableStatement.setTimestamp(parameterName, x, cal);
		log.setParam(x);
	}

	public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
		_callableStatement.setTimestamp(parameterName, x);
		log.setParam(x);
	}

	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		_callableStatement.setUnicodeStream(parameterIndex, x, length);
		log.setParam(x);
	}

	public void setURL(int parameterIndex, URL x) throws SQLException {
		_callableStatement.setURL(parameterIndex, x);
		log.setParam(x);
	}

	public void setURL(String parameterName, URL val) throws SQLException {
		_callableStatement.setURL(parameterName, val);
		log.setParam(val);
	}

	public boolean wasNull() throws SQLException {
		return _callableStatement.wasNull();
	}
}
